==============================================================
Ver 3.0.10 ▶▶▶ 2025.09.15 ~ 2025.09.19
* 작업 내용
 일주일 단위로 머지를 진행 할 예정이며, Version Info를 꼭 작성 할 것
1. 전기
08.26 (작업자 : 양진수, 송주호)
 ~
 
2. 디스플레이
09.19 (작업자 : 순홍진)
 1) 자재 정보 구분, 검출된 Defect 세부 내용 CSV 저장 
  - CSV 날짜 폴더 내부 Defect Data 폴더에 검출 된 Defect 세부 내용 저장 (현재 저장 내용 : Type, PosX, PosY, Width, Height, Color)

 2) Defect Image Crop 기능 추가 
  - 디스플레이는 기존 사용 기능 그대로 유지
  - 전기 Segmentation 은 검출 된 Defect Width, Height 에 추가로 Define 설정한 Crop 영역을 더 추가해서 여유 있게 Crop
  - 전기 딥러닝 크롭 도중 이미지가 보관이 되지 않도록 Dispose 가 되고 있어서 전기 딥러닝 실행 구조 일부 수정

 3) 자동삭제 Class 추가 (CDataDeleteManager)
  - Class 내부에 날짜, 용량 선택한 사항에 맞게 삭제 기능 추가 및 테스트 완료 
  - 이미지 같은 용량이 큰 데이터를 삭제 할 때 잠시 프로레스가 일시 정지 될 수 있기 떄문에 메인 UI 나 검사에 영향을 줄 수 있어 비동기 백그라운드로 삭제 or 조건 확인
  - 클래스 구조는 ImageSaveManager , Logger 비슷하게 생성 
  - 자동삭제 클래스 선언은 MainSystem , 호출은 SideForm 하드웨어 정보 표시 할떄 메인 메소드 호출 하여 클래스 Execute 실행 

 4) CImage 메소드 및 변수 추가 
  - 기존 Crop 메소드에서 Slice 이미지 기준으로 Crop 하는 오버라이드 메소드 추가 
  - m_nSliceJump(int[]) 변수 추가 디스플레이 같은 경우는 Cell 과 Cell 사이에 더미가 껴있을 경우가 있어서 더미 같은 경우는 건너 뛰고 Cell 만 Slice 할 수 있도록 변수 추가
  - SliceOptionSet() 메소드를 추가하여 이미지를 Slice 해야 할때 어느 행 과 행 사이를 Jump 하면 될지 파라미터를 받아서 m_nSliceJump 에 값 적용

 5) 시뮬레이션 페이지 및 기능 정상화 
  - 시뮬레이션 작업 중 Define 에 INSP_SIMUL 상수 추가 
  - Inspection Complete, DeepLearning Complete 되는 조건에서 INSP_NORMAL 일 경우만 메인 프로세스로 진입 되도록 기존 조건 변경, 그 외 Teach,Simul 은 ShowDisplay 되도록 수정
==============================================================


==============================================================
Ver 3.0.9 ▶▶▶ 2025.08.26 ~ 2025.09.11
* 작업 내용
 일주일 단위로 머지를 진행 할 예정이며, Version Info를 꼭 작성 할 것
1. 전기
08.26 (작업자 : 양진수, 송주호)
 ~
 
2. 디스플레이
08.29 (작업자 : 순홍진)
 1) Teaching Page
  - 변경 된 검사 룰베이스 기준으로 Teaching Page 업데이트 
  - 현재 Image Filter Page 는 사용 하는 Tool 이 없어서 사용 X

 2) CImage 수정 및 변수 추가
  - 자재가 틀어져서 투입 될 수 있어 기본 양옆 Width 에 여유분 Offset 줄 수 있도록 추가 및 수정 
  - m_nStandardWidth - 기본 Slice Widh
  - m_nSliceWidth - Standard + Offset 을 먹은 Width (메모리 할당은 m_nSliceWidth 변수를 이용 하여 할당 )
  - m_nSliceWidthOffset - Width Slice Offset 을 이용 하여 양옆 여유 공간 보유 하기 위해 추가 
  - Crop 메소드 sCurrentEquipment 프로젝트 구분하여 Crop 대상을 이미지 원본 or Slice 이미지 구분 하여 Crop
  - Reduced 축소 병합하는 과정에서 4x4 배열 고정에서 입력 받은 스케일에 맞게 루프문으로 평탄화 및 평균 검출 되도록 수정 

 3) 딥러닝 기능 추가 
  - 기존 세이지 세그멘테이션만 있는 클래스에 프로젝트 구분하여 클래시피 케이션 할당 할 수 있도록 수정 
  - 딥러닝 호출 하는 과정에서 CameraManger 에 RuleBaseCompleteEvent 리스트 이벤트 변수 추가 
  - 비동기식으로 처리되는 룰베이스 모든 검사가 이루어 질때까지 딥러닝 대기, 모든 이벤트가 Set 될 경우 모든 Crop 이미지 배열로 검사 

 4) 검사 및 출력 과정 프로젝트 구분 되도록 수정 
==============================================================



==============================================================
Ver 3.0.8 ▶▶▶ 2025.08.18 (작업자 : 이윤규)
* 작업 내용
1. Display, 전기
 - Display 전기 대응 되도록 CImage 클래스 수정 완료
  * 전기 
    - 총 15장의 이미지 리스트에 SliceImage를 4장을 가지고 있는 형태
    - 이 4장의 이미지를 세이지 딥러닝 SrImage로 변환하여 배열 형태로 결과데이터를 받아야 함
  * 디스플레이
    - 총 23장의 이미지 리스트를 가지고 있음
    - Slice 이미지는 리스트 이미지 0번에 9장(2번 레시피 기준)을 가지고 있음 (9장은 모델에 따라 바뀜)
 
 - 이미지는 모두 머지하여 1/4로 줄임(이를 디스플레이로 활용 계획)

2. CImage 변수
 - m_nMergeCount - 세로 이미지 머지 카운트  
 - m_nSliceCount - 가로 이미지 Slice 카운트

8월 18일 리뷰 후 인계
==============================================================



==============================================================
Ver 3.0.8 ▶▶▶ 2025.08.03 (작업자 : 이윤규)
* 작업 내용
1. 세이지 딥러닝
 - 세이지 딥러닝 사용 할 수 있도록 프로그램 수정 완료

2. 딥러닝 동작 구조
 - 삼성 전기 프로젝트에서 세이지 딥러닝을 사용하기 위해서는 이미지를 crop 하여 사용해야 함
 (2기가가 넘는 이미지는 메모리 할당을 할 수 없음)
 - 상기 이유로 CImage에서 이미지를 Crop하여 가지고 있을 수 있도록 프고그램 수정완료

3. 장비 구분
 - CRecipe의 m_sCurrentEquipment 변수를 활용하여 삼성 디스플레이, 전기 프로젝트를 구분 할 수 있도록 프로그램 완료

4. 티칭
 - Tool Load 하는 부분 아래와 같이 임시 처리
 if (!theRecipe.m_sCurrentEquipment.Contains("DISPLAY")) //250804 LYK 임시 처리
                return;
==============================================================



==============================================================
Ver 3.0.7 ▶▶▶ 2025.05,17 (작업자 : 이윤규)
* 작업 내용
 - DefectManager List List 구조로 변경


//250517 LYK 임시 주석 해둔 부분이 있음 
==============================================================



==============================================================
Ver 3.0.6 ▶▶▶ 2025.04.08 (작업자 : 이윤규)
* 작업 내용

1. 이미지 디스플레이 프로그램 완료
2. 머지 이미지 저장 프로그램 완료
 
==============================================================



==============================================================
Ver 3.0.5 ▶▶▶ 2025.04.08 (작업자 : 나인성)
* 작업 내용

1. FormTeachCogFindLine 프로그램 완료
2. FormTeachCogPM 프로그램 완료
3. FormTeachInsFindLine 프로그램 완료
4. FormTeachInsPM 프로그램 완료
 
==============================================================



==============================================================
Ver 3.0.4 ▶▶▶ 2024.04.07 (작업자 : 김창희)
* 작업 내용

1. SettingCam
 - SettingCam UI 작성
 - Parameter json 파일에 Load/Save 추가, 카메라에 저장
 - Form Load시 UI에 파라미터 디스플레이
 
==============================================================



==============================================================
Ver 3.0.3 ▶▶▶ 2024.04.07 (작업자 : 이윤규)
* 작업 내용

1. CIS 카메라 연동
 - 카메라 연동 하여 Display 확인 완료

2. Log
 - 기존 Logging 함수 삭제
 - CLogger 클래스 활용하여 로그 기록 할 수 있도록 수정 완료
 
==============================================================



==============================================================
Ver 3.0.2 ▶▶▶ 2024.04.07 (작업자 : 노우택)
* 작업 내용

Blob Teaching Page 활성화
 
==============================================================



==============================================================
Ver 3.0.1 ▶▶▶ 2024.04.04 (작업자 : 이윤규)
* 작업 내용

한화 큐셀 프로그램 기반 플랫폼 정리
 
==============================================================




==============================================================
Ver 2.0.1 ▶▶▶ 2024.06.29, 2024.08.22 (작업자 : 이윤규)
* 작업 내용

프로그램 정리
 
==============================================================




==============================================================

아래는 프로그램 구조와 관련된 작업 내용

==============================================================


==============================================================
Ver 2.0.2 ▶▶▶ 2024.09.02 ~ 2024.09.04 (작업자 : 순홍진)
* 작업 내용

1. Teaching Page Tool 마다 Parameter 를 폼으로 관리 하도록 추가 -> 좋은 개선 방향이 있을 경우 수정 예정  
2. Work 내부 함수 명칭 Inspection 으로 명칭 된 부분 Work 로 교체 (Align 공용 사용 위해)
3. Function Alignment 인터페이스 추가 -> Calibration, Align 같이 사용 위해 구분
4. CDefect 클래스에 모든 데이터를 계속 추가 하기에 구분이 되지 않아 Inspection, Align 전용 데이트를 구분해서 담기위한 Structure 추가 
5. MainSystem 내부 수식 계산 등 프로세스에 관련 없는 함수 -> Utility - CMath 클래스로 이동
 
==============================================================

==============================================================
Ver 1.1.15 ▶▶▶ 2024.04.04 ~ 17 (작업자 : 베트남팀)
프로그램 작업 내용

1. DoFFCGrabStart 함수 추가
 - 카메라 FFC(Flat Field Calibration)를 처리 하기위해 GrabStart 함수 추가

2. FfcModel Class 추가

3. Calibration UI 추가
 
* 기능 구현은 완료 됐으나, PC 부하율이 높아짐(메모리, CPU 사용량)
 - 김항 프로가 4월 27일 입국 예정으로 다른 버전의 프로그램으로 대응 하기로 함
 - 베트남팀에서는 따로 상기 부하율 관련한 이슈를 해결 하기로함

* To Do List 
1. DoFFCGrabStart 함수 추가

==============================================================



==============================================================
Ver 1.1.14 ▶▶▶ 2024.03.22 (작업자 : 이윤규)
프로그램 작업 내용

1. Finger Classify 함수 추가(Finger Cut, Knot의 타입을 구분 하기 위한 함수)
 - 기존 DisplayScreenPage의 DefectListShow 함수 에서 처리 하던 방식(Type 구분하여 Display)을 상기 함수에서 처리 할 수 있도록 변경
 * Finger Cut, Knot의 우선 순위
  - Knot(Type 9 ~ Type 1), Cut(Type 5 ~ Type 1)
  - 우선 순위에 따라 Type이 정해진다. 예를 들면 Type4로 분류된 수량이 아무리 많더라도, Type5에 해당 된다면 해달 Finger Cut은 Type5로 분류한다.

2. SetPanelLabel 함수 수정
 - Defect와 관련된 Panel, Label등에 색상 변경(OK - 초록, NG - 빨강), 데이터 등을 Set 하는 함수
 - 간단히 처리 할 수 있도록 반복문으로 변경(Control의 Panel, Label의 명칭을 반복문으로 처리 할 수 있도록 수정)

* To Do List 
1. FingerClassify 함수 추가
2. SetPanelLabel 함수 수정(반복문으로 처리 할 수 있도록)

==============================================================


==============================================================
2024.03.15 ~ 21 전시회 준비

==============================================================



==============================================================
Ver 1.1.13 ▶▶▶ 2024.03.13 ~ 14 (작업자 : 이윤규)
프로그램 작업 내용

* Grab Time
1. Grab Time을 CSV에 저장 할때 전역 변수를 사용 하던 부분 삭제
2. Defect List에 할당
  - Sorter, Printer - Print Contour 검사를 매번 진행 하기때문에 해당 검사 DefectList에 Grab Time 정보 할당
  - CVD는 컬러 검사 변수에 할당 할 수 있도록 수정 완료

* Camera 객체 할당
 - 유레시스 클래스에 카메라 객체 할당

* To Do List 
1. Grab Time CSV 저장 포맷 변경(전역 변수 제거)

==============================================================


==============================================================
Ver 1.1.12 ▶▶▶ 2024.03.11 ~ 12 (작업자 : 이윤규)
프로그램 작업 내용

1. 프로그램에서 페이지 컨트롤러를 제어 할 수 있도록 프로그램 완료

* To Do List 
1. 페이지 컨트롤러를 제어

==============================================================


==============================================================
Ver 1.1.11 ▶▶▶ 2024.03.07 (작업자 : 이윤규)
프로그램 작업 내용

1. Teaching Page (Crop) - Crop을 하여 딥러닝 검사 속도를 높힘
 - 딥러닝 검사를 위한 Crop Teaching Page 구성 완료

 2. 검사 Mode 분리
 - Teaching None : 전체 검사를 진행 하기위한 모드
 - Teaching deep : 딥러닝 티칭 모드
 - Teaching Crop : 이미지를 크롭 하기 위한 티칭 모드

* To Do List 
1. Teaching Page 구성
2. 검사 Mode 분리

==============================================================


==============================================================
Ver 1.1.10 ▶▶▶ 2024.03.04 (작업자 : 이윤규)
프로그램 작업 내용

1. 딥러닝 티칭 페이지
 - UI 구성 완료후 디버깅 진행
 - Sorter, Printer 모드 전환시 정상적으로 동작 되는 것 확인
 - CVD와 관련된 내용은 추후 처리 필요

2. CCameraManager 클래스 
*함수 삭제
 - SetRefreshGrabImageWhite
 - SetRefreshGrabImageColor
 - SetRefreshLiveImageWhite 
 - SetRefreshLiveImageColor
* SetRefreshGrabImage 함수 하나로 합침


* To Do List 
1. 딥러닝 티칭 페이지 구성 완료 및 디버깅
2. 함수 삭제

==============================================================


==============================================================
Ver 1.1.09 ▶▶▶ 2024.03.02 (작업자 : 이윤규)
프로그램 작업 내용

1. 레시피
 - 딥러닝 검사와 관련된 Limit 변수를 Class로 관리 할 수 있도록 변경
 - Json 포맷으로 저장이 되는데 불필요한 항목으로 나뉘어 저장 되는 부분 수정 완료

2. 딥러닝 티칭 페이지
 - 딥러닝과 관련된 파라미터, L:imit 값을 티칭 페이지에서 세팅 할 수 있도록 UI 구성
 - 파라미터 수정 후 영상을 바로 확인 할 수 있도로 구성

3. CCameraManager 클래스 
 * 함수 삭제
 - SetDeepLearningCompleteEvent
 - SetColorInspectionCompleteEvent
 - SetContourInspectionCompleteEvent
 - SetCrackInspectionCompleteEvent	 
 * SetInspectionConpleteEvent 함수 하나로 합침



* To Do List 
1. 레시피 정리
2. 딥러닝 티칭 페이지 1차 정리
3. 함수 삭제

==============================================================


==============================================================
Ver 1.1.08 ▶▶▶ 2024.02.29 (작업자 : 이윤규)
프로그램 작업 내용
1. Parameter Page
 - Parameter 페이지의 딥러닝 관련한 파라미터를 티칭 페이지로 옮김
 - 해당 페이지에서 상기 파라미터 삭제

2. Teaching Page
 - Teaching 페이지 구성중(딥러닝)


* To Do List 
1. Parameter Page 정리

==============================================================


==============================================================
Ver 1.1.07 ▶▶▶ 2024.02.21 (작업자 : 이윤규)
프로그램 작업 내용
1. 소터, 프린터, CVD 디버깅
 - 모드(소터, 프린터, CVD)에 따라 동작 테스트 진행

*프린터
 - 프린터 라이브 이미지 테스트 중 이미지 디스플레이가 안되는 문제점 확인
 - 확인 결과, Diplay Panel이 중첩되어있어 이미지가 Refresh 안된것으로 확인
 - 중첩된 Display Panel을 삭제 후 정상 동작 되는것 확인


* To Do List 
1. 디버깅

==============================================================


==============================================================
Ver 1.1.06 ▶▶▶ 2024.02.20 (작업자 : 이윤규)
프로그램 작업 내용
1. Frame Grabber 장착 여부를 체크하고 자동 검사 모드, Simulation 모드를 구분할 수 있도록 프로그램 및 테스트 완료
2. 기존 Define에 선언 되어 있던 Simulation Mode 상수 삭제

* To Do List 
1. Frame Grabber 장착 여부를 체크하고 자동 검사 모드, Simulation 모드를 구분할 수 있도록 프로그램

==============================================================


==============================================================
Ver 1.1.05 ▶▶▶ 2024.02.19 (작업자 : 이윤규)
프로그램 작업 내용
1. CMainSystem Class
 - ManualReset Event 처리 정리 및 프로그램 동작 확인 완료
  * GrabCompleteEvents - 카메라 수량에 맞게 동적 할당 할 수 있도록 수정
  * InspectionCompleteEvnets(할당된 모든 이벤트가 Signal되어야 결과 취합 함수로 진입한다.) 
    - 소터, 프린터, CVD에 맞게 동적 할당 할 수 있도록 수정(검사 항목이 다르기 때문)
    - 소터(이벤트 수량 13개) - 모노 검사[0], 컬러[1] ~ [4], 컨투어[5] ~ [8], 크랙[9] ~ [12]
	- 프린터(이벤트 수량 9개) - 모노 검사[0], 컨투어[1] ~ [4], 크랙[5] ~ [8]
	- CVD(이벤트 수량 3개) - 모노 검사[0], 컬러[1], 크랙[2]
2. CVD 검사
* 차이점
 *소터, 프린트의 경우 프린트 컨투어 검사를 진행하기 때문에 이 검사 객체를 활용
  (매번 데이터를 측정하여 저장하기 때문에 Inspection Idx와 WaferID를 받을 수 있음)
  - CMainSystem의 DoInspectionComplete함수가 호출되면 InspectionInfos에 프린트 컨투어 검사 정보를 할당한다.(WaferID, InspectionIdx)
  - InspectionInfos는 배열로 구성 되어있다.

  - CVD 검사는 상기 관련된 내용을 처리하기 위해 컬러 검사 객체 활용(컨투어 검사를 진행하지 않기 때문)

3. FormSettingCamScreen Class
 a. DoLoad 함수 내용 수정
  - 각각의 컨트롤(텍스트 박스 등)에 해당 하는 값을 반복문(카메라 수량에 맞게)으로 처리 할 수 있도록 프로그램 수정 완료
 
 b. Exposure Click, Gain Click 함수 구조 수정
  - Cam1 ~ Cam4 4개의 함수로 나뉘어 있던 것을 함수 하나로 처리 할 수 있도록 수정 완료

4. ColorResultManager 리스트 추가
 - 각 카메라별로 데이터를 취합하여 처리 하기 위함 
  (기존에는 결과 취합 함수에서 검사를 한번더 진행하고 결과데이터를 받아옴)
 - 해당 부분 수정 및 테스트 완료

5. Recipe Data Load, Save
 - ExposureTime, Gain, ColorGainR, G, B 카메라 수량에 맞게 각각의 데이터가 반복문으로 저장 및 로드 될 수 있도록 프로그램 수정 완료

* To Do List 
1. ManualReset Event 처리 정리
2. CVD 검사 
3. 각각의 컨트롤(텍스트 박스 등), 레시피에 해당 하는 값을 반복문(카메라 수량에 맞게)으로 처리 할 수 있도록 프로그램 수정

==============================================================


==============================================================
Ver 1.1.04 ▶▶▶ 2024.02.13 (작업자 : 이윤규)
프로그램 작업 내용
1. CCameraManager 함수 추가
 int GetListImageWidth() - Image Width값을 가져온다.
 int GetListImageHeight() - Image Height값을 가져온다.

2. Cam Setting Screen
 - 개선된 UI 반영

* To Do List 
1. Cam Setting Screen - 개선 UI 반영

==============================================================


==============================================================
Ver 1.1.03 ▶▶▶ 2024.02.09 (작업자 : 이윤규)
프로그램 작업 내용
1. 검사 Event
 - 검사 장비에 맞게 Event 할당 되도록 프로그램 수정 중
   소터 검사(딥러닝, 크랙, 컬러두께, 컨투어) : Event 13개
   프린터 검사(딥러닝, 크랙, 컨투어) : Event 9개
   CVD 검사(딥러닝, 크랙, 컬러) : Event 9개

2. 검사 실행
 - 소터, 프린터, CVD검사에 맞는 알맞은 검사가 진행 될 수 있도록 프로그램 수정 필요
 - 동작 테스트 필요

2. UI
 - CRecipe클래스에 m_sCurrentEquipment 변수 추가(소터("SORTER"), 프린터("PRINTER"), CVD("CVD") 검사 구분)
 - m_sCurrentEquipment변수에 맞게 Sorter, Printer Main Display 되는 것 확인 완료

* To Do List 
1. 검사 이벤트 할당 수정(소터, 프린터, CVD에 맞게)

==============================================================


==============================================================
Ver 1.1.02 ▶▶▶ 2024.02.08 (작업자 : 이윤규)
프로그램 작업 내용
1. Main View
 - 개선 UI 적용 완료
 * DisplayScreen 내부 구조 수정
  - 양산 당시 Type 구분을 위해 급하게 프로그램하여 내용이 복잡했음
  - 이에 Type 구분을 좀더 간단히 처리 할 수 있도록 프로그램 수정 완료

2. Camera Status
 - 카메라 연결 상태를보고 UI 표시(연결 : Lime, 미연결 : Red)

* To Do List 
1. 메인 페이지 개선 UI 적용
2. Camera 연결 상태를 보고 UI 표시 할 수 있도록 수정 완료

==============================================================


==============================================================
Ver 1.1.01 ▶▶▶ 2024.02.05 (작업자 : 이윤규)
프로그램 작업 내용
1. Profibus(소터), Tcp(프린터)
void SetInspectionInfos(InspectionInfo _Infos) - InspectionInfos 정보를 인자로 넘겨 받아 할당 한다.

* To Do List 
1. 통신 Profibus, TCP에 Inspection 정보를 할당

==============================================================


==============================================================
Ver 0.1.50 ▶▶▶ 2024.02.02 (작업자 : 이윤규)
프로그램 작업 내용
1. InspectionInfos List 삭제
 - 타이밍이 맞지 않을것을 고려하여 구조 수정 (배열로 변경)
    - Index 검사 구조 정리중
    양산 검증 당시 Cycle 정보를 확인했을때, 검사 Start 신호가 Cycle Time(1초)보다 빠르게 들어오는 경우가 있음
    - Grab 신호가 빠르게 들어올때를 대비하여 Index 병렬화
     * Wafer 0번을 검사중인데 Wafer 1번 검사 시작 신호가 들어온 경우
      - WaferID가 변경 됨
      - 이물 검사 리스트가 초기화 됨에 따라 잘못된 데이터가 송신되는것을 방지하기 위함
       (Wafer 0번에 대한 WaferID와 검사 결과가 송신되어야 하는데 1번 Wafer 정보가 송신되는것을 방지)
    - 시뮬레이션 활용하여 정상동작 확인

 - 소터, 프린트의 경우 프린트 컨투어 검사를 진행하기 때문에 이 검사 객체를 활용
  (매번 데이터를 측정하여 저장하기 때문에 Inspection Idx와 WaferID를 받을 수 있음)
 - CMainSystem의 DoInspectionComplete함수가 호출되면 InspectionInfos에 프린트 컨투어 검사 정보를 할당한다.(WaferID, InspectionIdx)
 - InspectionInfos는 배열로 구성 되어있다.

2. MainDisplay Judge, 시간등 표시
 - RefreshResult 하나로 통합(Total Inspection Time, DeepLearning Inspection Time, DT Result, Color 두께)


* To Do List 
1. InspectionInfos 배열로 수정(List->배열)
2. RefreshReslt 하나로 통합
==============================================================


==============================================================
Ver 0.1.49 ▶▶▶ 2024.01.28 (작업자 : 이윤규)
프로그램 작업 내용

1. Crack, Crop, Color 분리(Cam1 ~ Cam4)되어있던 ToolBlock 변수를 List 변수로 변경 기존 분리되어 있던 변수 삭제
2. Crack, Color 검사 결과 취합 구조화
3. 검사 시간 처리 및 Wafer 정보 할당(List 변수 추가)
* Cycle Time이 1초 이고, 검사가 완료되지 않았을때 다음 검사 신호가 들어와 WaferID 갱신, TotalInspectionTime 초기화 되는것을 방지 하기 위함
  (ID가 변경되어 잘못된 WaferID가 송신되는 것을 방지, TotalInspectionTime이 초기화 되어 잘못된 시간이 기록되는 것을 방지 )
 - 검사 시작시 WaferID, InspectionIdx를 할당 하고, totalGrabInspectionTime StopWatch를 시작함
 - TotalTime, Crack, DeepLearning, Color, Contour 의 Inspection Time을 측정 후 상기 List 변수에 시간을 기록 할 수 있도록 프로그램 완료

 public class InspectionInfo    클래스 생성
    {
        public Stopwatch totalGrabInspectionTime;	//Total 시간
        public int InspectionIdx;					//InspectionIDX - 병렬 처리를 위한 Index
        public string WaferID;						//WaferID
        public long DeepLearningTime;
        public long CrackInspTime;
        public long ContourInspTime;
        public long ColorInspTime;
    }
 - InspectionTime.csv의 WaferID, Total, Crack, DeepLearning, Color, Contour 의 Inspection Time을 상기 변수로 기록 할 수 있도록 수정함

* To Do List 
1. Crack, Crop, Color 분리(Cam1 ~ Cam4)되어있던 ToolBlock 변수를 List 변수로 변경 기존 분리되어 있던 변수 삭제
2. Crack, Color 검사 결과 취합 구조화
3. 검사 시간 처리 및 Wafer 정보 할당(List 형태)
==============================================================


==============================================================
Ver 0.1.48 ▶▶▶ 2024.01.26 (작업자 : 이윤규)
프로그램 작업 내용

1. 프린트 컨투어
 - List ContourInspectToolBlock 추가  분리(Cam1 ~ Cam4)되어있던 ToolBlock 변수를 List 변수로 변경 기존 분리되어 있던 변수 삭제
 - ExtractData 함수 내용 수정
   Switch ~ Case 구문 삭제

            기존 : 레시피 변수로 바로 접근하여 Cam1 ~ Cam4 검사가 같은 구문이 반복됨
            변경 : 객체 처리 하여 간단하게 처리 할 수 있도록 프로그램 수정 완료
              - 초기화 할때 CogContourToolBlock 변수에 Cam1 ~ Cam4의 ToolBlock을 할당 해주면 됨

                 : Dictionary 삭제 후 DefectContourCandidates List로 변경
  - 프린트 컨투어 결과 처리 구조화 완료

* To Do List 
1. 프린트 컨투어 검사 결과 취합 구조화 
==============================================================


==============================================================
Ver 0.1.47 ▶▶▶ 2024.01.25 (작업자 : 이윤규)
프로그램 작업 내용

1. 함수 추가
*CCameraManager 클래스
 void DeepLearningRun() - 딥러닝 검사를 하기 위한 함수
 void ColorInspectionRun() - 컬러 두께 검사를 하기 위한 스레드 함수
 void CrackInspectionRun() - 크랙 검사를 하기위한 스레드 함수
 void ContourInspectionRun() - 프린트 컨투어 검사를 하기 위한 스레드 함수
 void ColorInspectionStart() - 컬러 두께 검사를 하기 위해 외부 클래스에서 접근하기 위한 함수
 void CrackInspectionStart() - 크랙 검사를 하기 위해 외부 클래스에서 접근하기 위한 함수
 void ContourInspectionStart() - 프린트 컨투어 검사를 하기 위해 외부 클래스에서 접근하기 위한 함수

2. 프린트 컨투어
 a. CDefect 클래스에 프린트 컨투어 필요 변수 추가 (Wafer Corner X-Y, Print Corner X-Y 등)
 b. ProductInfo 클래스 ContourResultManager(List) 변수 추가 
  - 갭 측정에 관련한 데이터를 Dictionary로 받지 않고, 해당 변수로 대체할 계획
 c. 추후 CCameraManager의 프린트 컨투어 검사 객체의 접근 지정자를 Private으로 수정 예정

3. 불필요 변수 삭제

* To Do List 
1. 함수 및 변수 접근 지정자 지정
2. 구조화
==============================================================


==============================================================
Ver 0.1.46 ▶▶▶ 2024.01.24 (작업자 : 이윤규)
프로그램 작업 내용

1. 불필요 변수 삭제
2. Thread 객체 Uninitial 추가
3. 컬러 검사 시작 위치 수정
 - Grab Complete Event가 모두 시그널 된 후 CMainSystem의 DoInspectionStart 함수가 호출될때 검사를 시작 하도록 수정
4. 함수 추가
  CCameraManager 클래스
   void DeepLearningComplete() - DeepLearningComplete 함수는 검사가 끝나면 호출 되며, CMainSystem의 InspectionCompleteEvent[0]와 연동되어 있다. 
   void ColorInspectionComplete() - ColorInspectionComplete 함수는 검사가 끝나면 호출 되며, CMainSystem의 InspectionCompleteEvent[1],[2],[3],[4]와 연동되어 있다. 각 카메라별 검사가 Event가 Signal 되어야 한다는 뜻
   void ContourInspectionComplete() - ContourInspectionComplete 함수는 검사가 끝나면 호출 되며, CMainSystem의 InspectionCompleteEvent[5],[6],[7],[8]와 연동되어 있다. 각 카메라별 검사가 Event가 Signal 되어야 한다는 뜻
   void CrackInspectionComplete() - CrackInspectionComplete 함수는 검사가 끝나면 호출 되며, CMainSystem의 InspectionCompleteEvent[9],[10],[11],[12]와 연동되어 있다. 각 카메라별 검사가 Event가 Signal 되어야 한다는 뜻
* Event Test 완료
5. 

* To Do List 
1. 함수 및 변수 접근 지정자 지정
2. 구조화
==============================================================


==============================================================
Ver 0.1.45 ▶▶▶ 2024.01.23 (작업자 : 이윤규)
프로그램 작업 내용

1. RefreshHistoryImage Display 수정
  a. MainSystem 클래스 함수 추가
   - void HistoryImageDisplay() - History View에 이미지를 디스플레이 하기위해 호출 하는 함수
  b. CCameraManager 클래스 함수 추가
   - void ShowImageHistoryDisplay() - 각 객체 별 RefreshHistoryImage 델리게이트 변수로 Image Display 
  - RefreshHistoryImage 델리게이트 변수의 접근 지정자를 Private으로 설정
  - RefreshHistoryImage 델리게이트의 접근 방법은 theMainSystem->HistoryImageDisplay(); 함수 호출

2. ManualResetEvent
 - 딥러닝, Crack, 컨투어, 컬러두께 Manual Reset Event 할당
 - 이에 관련한 구조 정리 필요

3. 함수추가
  CMainSystem 클래스
   void HistoryImageDisplay() - History View에 이미지를 디스플레이 하기위해 호출 하는 함수

  CCameraManager 클래스 
   void SetRefreshHistoryImage(Action<CImage> _RefreshHistoryImage) - CHistoryImageControl 클래스에서 RefreshHistoryImage(델리게이트 변수)에 접근 하기 위한 Setter 함수
   void SetContourInspectionCompleteEvent(ManualResetEvent _ContourInspectionCompleteEvent) - CMainSystem 클래스에서 DeepLearningCompleteEvent(델리게이트 변수)에 접근 하기 위한 Setter 함수
   void SetColorInspectionCompleteEvent(ManualResetEvent _ColorInspectionCompleteEvent) - CMainSystem 클래스에서 InspectionCompleteEvents(델리게이트 변수)에 접근 하기 위한 Setter 함수
   void SetCrackInspectionCompleteEvent(ManualResetEvent _CrackInspectionCompleteEvent) - CMainSystem 클래스에서 CrackInspectionCompleteEvent(델리게이트 변수)에 접근 하기 위한 Setter 함수

* To Do List 
1. 함수 및 변수 접근 지정자 지정
2. 구조화
==============================================================


==============================================================
Ver 0.1.44 ▶▶▶ 2024.01.22 (작업자 : 이윤규)
프로그램 작업 내용

1. 불필요 변수 삭제
2. Thread 객체 Uninitial 추가
3. 컬러 검사 시작 위치 수정
 - Grab Complete Event가 모두 시그널 된 후 CMainSystem의 DoInspectionStart 함수가 호출될때 검사를 시작 하도록 수정
4. 
void SetGrabCompleteEvent(ManualResetEvent _GrabCompleteEvent) - CMainSystem 클래스에서 GrabCompleteEvent(델리게이트 변수)에 접근 하기 위한 Setter 함수
void SetDeepLearningCompleteEvent(ManualResetEvent _DeepLearningCompleteEvent) - CMainSystem 클래스에서 DeepLearningCompleteEvent(델리게이트 변수)에 접근 하기 위한 Setter 함수


* To Do List 
1. 함수 및 변수 접근 지정자 지정
2. 구조화
==============================================================


==============================================================
Ver 0.1.43 ▶▶▶ 2024.01.21 (작업자 : 이윤규)
프로그램 작업 내용

1. Defect 누적 디스플레이 View 삭제
2. 그랩 후 영상이 디스플레이 되지 않는 증상이 있어 수정함
3. CCameraManager 클래스에 함수 추가
 - void SetRefreshLiveImageWhite(Action<CImage> _RefreshLiveImageWhite) - CCameraManager 클래스 외부에서 RefreshLiveImageWhite(델리게이트 변수)변수에 함수를 할당 하기 위한 Setter 함수
 - void SetRefreshLiveImageColor(Action<CImage> _RefreshLiveImageColor)	- CCameraManager 클래스 외부에서 RefreshLiveImageColor(델리게이트 변수)변수에 함수를 할당 하기 위한 Setter 함수

4. CCameraManager클래스 접근 지정자 지정(public -> private)
 1. RefreshLiveImageWhite 변수
 2. RefreshLiveImageColor 변수


* To Do List 
1. 수정된 프로그램으로 그랩하여 검사 테스트 및 디버깅
==============================================================

==============================================================
Ver 0.1.42 ▶▶▶ 2024.01.18 (작업자 : 이윤규)
프로그램 작업 내용

1. Defect 누적 디스플레이 View 삭제
2. 그랩 후 영상이 디스플레이 되지 않는 증상이 있어 수정함
3. CCameraManager 클래스에 함수 추가
 - void Imageisplay() - CCameraManager 클래스 외부에서 디스플레이 함수를 호출 해야 할 경우 사용한다.
 - void SetRefreshGrabImageWhite(Action<CImage> _RefreshGrabImageWhite) - CCameraManager 클래스 외부에서 RefreshGrabImageWhite(델리게이트 변수)변수에 함수를 할당 하기 위한 Setter 함수
 - void SetRefreshGrabImageColor(Action<CImage> _RefreshGrabImageColor)	- CCameraManager 클래스 외부에서 RefreshGrabImageColor(델리게이트 변수)변수에 함수를 할당 하기 위한 Setter 함수
 - void SimulationImgRead(string _ImagePath, string _nNumber) - 시뮬레이션을 위해 이미지를 로드 하기 위한 함수

4. CCameraManager클래스 접근 지정자 지정(public -> private)
 1. RefreshGrabImageWhite 변수
 2. RefreshGrabImageColor 변수
 3. mainForm 변수
 4. ListImage 변수

* 상기 변수 외에도 정리하면서 접근 지정자들이 변경될 예정

* To Do List 
1. 함수 및 변수 접근 지정자 지정
==============================================================

==============================================================

Ver 0.1.41 ▶▶▶ 2024.01.16 (작업자 : 이윤규)
프로그램 작업 내용

1. CCameraManager
 - 전역 변수를 활용하지 않고 객체로 접근 하여 처리 할 수 있도록 수정
 (테스트 프로그램 당시 시간이 없어 전역 변수 남발이 됨)
 - 위와 같이 처리 하도록 DoGrabStart, CreateColorImage 함수 수정
 - DoGrabStart 함수의 Grab Time Log도 위와 마찬가지로 객체로 처리 할 수 있도록 수정
 - CreateColorImage 함수의 Resize, Create Color Image Time Log도 마찬가지로 객체로 처리 할 수 있도록 수정

* To Do List 
1. CCamera Manager 구조 정리
==============================================================

==============================================================

Ver 0.1.40 ▶▶▶ 2024.01.15 (작업자 : 이윤규)
프로그램 작업 내용

1. 불필요한 함수, 클래스, 변수 제거

* To Do List 
1. 불필요한 함수, 변수 제거
==============================================================








==============================================================

2023년도 작업 내용

==============================================================



==============================================================

Ver 0.1.33 ▶▶▶ 2023.09.15 (작업자 : 이윤규)
프로그램 작업 내용

1. Color Resize
- 메모리 공간을 따로 관리 할 수 있도록 프로그램 수정 완료 하였으며 정상 동작 확인

2. PLC
- PLC테스트를 위해 노주현팀장이 인폼준 내용 반영

* To Do List 
1. 
==============================================================


==============================================================

Ver 0.1.32 ▶▶▶ 2023.09.14 (작업자 : 이윤규)
프로그램 작업 내용

1. Print Contour
- Left Top, Right Top, Left Btm, Right Btm의 Wafer 외곽선과 Wafer 외곽선 바로 다음에 있는 Print 외곽선과의 Gap을 측정 할 수 있도록 프로그램 완료
- 기능 동작 특이 사항 없으며, 세장의 Cell에대한 3회 반복 자료 작성 완료

2. Color Resize
- Print Contour, Image Crop(딥러닝 속도를 개선 하기 위해 영상을 Crop함)기능 동작에 이상 증상 발생
- 확인 결과 Color 검사를 위해 이미지(MONO R, G, B) Resize를 함
- 이때, Resize된 이미지의 메모리 공간을 따로 관리했어야 했는데, 동일한 메모리 공간을 사용함에 따라 Print Contour, Image Crop 기능 동작에 문제가 발생한것으로 파악됨
- 명일 메모리 공간을 따로 관리 할 수 있도록 프로그램 수정 예정

* To Do List 
1. 
==============================================================


==============================================================

Ver 0.1.31 ▶▶▶ 2023.09.13 (작업자 : 이윤규)
프로그램 작업 내용

1. 히스토리 페이지에서 Defect Width, Height, Area 크기 표시 할 수 있도록 프로그램 수정 완료


* To Do List 
1. 
==============================================================


==============================================================

Ver 0.1.30 ▶▶▶ 2023.09.12 (작업자 : 이윤규)
프로그램 작업 내용

1. Finger Knot, Finger Cut 조건 처리
 - Finger Knot(Type 10개), Finger Cut(Type 5개)에 관련한 Type별로 구분 될 수 있도록 프로그램 완료
 - Width, Height와 Limit Count를 조정 하며 테스트 진행
 - 테스트 결과 정상적으로 OK, NG 판정 함

2. 스크래치
- 스크래치 검출에는 특이 사항이 없으나 ThreshHold가 낮은 스크래치 모두 검출(검사된 불량 정보와 실제 셀을 매칭 하여 불량 확인 - 모두 매칭 됨) 
- 너무 많은양의 스크래치가 검출되어 전수 NG 발생 가능성이 있을 수 있어 Spec 협의 필요
(이전 미팅때 스크래치는 모두 잡아야 한다고 함) 

3. Color Grade
- 수령한 A1, A2, UL셀을 이용하여 테스트 진행
- A1 셀 정상적으로 AI Grade로 판독
- A2 셀 5장 중 A1셀 2개 A2셀 3개로 판독(A1 셀로 판독된 실제 셀을 A2로 판독된 실제 셀과 비교 했을때 A1셀로 판독된 셀이 어두운 것 확인) 
- UL 셀 5장 중 A2셀 2개 UL 3개로 판독(A2 셀로 판독된 실제 셀을 UL로 판독된 실제 셀과 비교 했을때 A2셀로 판독된 셀이 어두운 것 확인) 

4. Crop
- SegMentation DeepLearning의 속도를 개선 하고자 Crop Image를 사용
- 금일 테스트 중 이상증상 발생
- 2번째 검사까지 정상적이나, 3번째 부터 Crop 영상이 이상해짐(2100 x 2000 으로 Crop이 되는 등)
- 임시로 Crop이미지를 사용하지 않고 원본 이미지를 이용하여 SegMentation DeepLearning 진행 되도록 프로그램 수정
- Crop관련하여 디버깅 필요


* To Do List 
1. 
==============================================================


==============================================================

Ver 0.1.29 ▶▶▶ 2023.09.11 (작업자 : 이윤규)
1. Finger Knot, Cut Limit 관련
* 9/11 진행 사항
 - Finger Knot, Cut Lmit값을 UI에서 관리 할 수 있도록 처리 완료

* 9/12 진행 예정
 - Finger Knot, Cut과 관련한 조건 처리 할 수 있도록 프로그램 예정
(EX 예를들어
- 검사한 셀에서 Finger Knot 불량에서 Type 1, Type 9의 불량이 검출 됐다고 가정
- Critical한 등급은 Type 9이기 때문에 UI에 Type 9를 표시 하며 검출된 수량 및 Defect 영역 표시  
)

 - 프로그램 완료 후 테스트 진행 예정

2. Color Grade 처리
 - A2, A1, UL Color 등급을 UI에서 관리 할 수 있도록 프로그램 수정 완료
 - Display 화면에 등급과 두께 값이 함께 디스플레이 하도록 프로그램 수정 완료

3. DT
 - DT 결과를 Display 할 수 있도록 프로그램 수정 완료


* To Do List 
1. 
==============================================================


==============================================================

Ver 0.1.29 ▶▶▶ 2023.09.11 (작업자 : 이윤규)
1. Finger Knot, Cut Limit 관련
* 9/11 진행 사항
 - Finger Knot, Cut Lmit값을 UI에서 관리 할 수 있도록 처리 완료

* 9/12 진행 예정
 - Finger Knot, Cut과 관련한 조건 처리 할 수 있도록 프로그램 예정
(EX 예를들어
- 검사한 셀에서 Finger Knot 불량에서 Type 1, Type 9의 불량이 검출 됐다고 가정
- Critical한 등급은 Type 9이기 때문에 UI에 Type 9를 표시 하며 검출된 수량 및 Defect 영역 표시  
)

 - 프로그램 완료 후 테스트 진행 예정

2. Color Grade 처리
 - A2, A1, UL Color 등급을 UI에서 관리 할 수 있도록 프로그램 수정 완료
 - Display 화면에 등급과 두께 값이 함께 디스플레이 하도록 프로그램 수정 완료

3. DT
 - DT 결과를 Display 할 수 있도록 프로그램 수정 완료


* To Do List 
1. 
==============================================================

==============================================================

Ver 0.1.28 ▶▶▶ 2023.09.04 (작업자 : 이윤규)
* 작업 내용
1. 검출 수량 제한치, 최소 검출 사이즈를 설정 할 수 있도록 프로그램 완료
(이 파라미터 조건을 추가 해야함, 유아이에만 설정 할 수 있도록 프로그램)
2. Current Model, CellID가 Display될 수 있도록 프로그램 수정


* To Do List 
1. 
==============================================================


==============================================================

Ver 0.1.27 ▶▶▶ 2023.08.31 (작업자 : 이윤규)
* 작업 내용
1. History Log(검사 데이터 - 년월일_DailyReport.csv), 검사 시간(년월일_InspectionTime.csv)이 남도록 프로그램 수정
2. History Data View에 Defect표시를 Rectangle로 하지않고, Polygon으로 Defect를 표시하도록 프로그램 수정
3. Live Display 이상
  - Color 이미지가 1/4 줄인 이미지가 디스플레이 됨에 따라 스케일이 맞지 않아 발생한 문제
  - 이에 강제로 Scale값을 2배로 늘리고 X, Y 포인트를 0으로 할당 하도록 프로그램 수정 이후 정상적으로 디스플레이 됨

* To Do List 
1. 
==============================================================




==============================================================

Ver 0.1.26 ▶▶▶ 2023.08.29 (작업자 : 노주현, 이윤규)
* 작업 내용
1. DT 검사 추가 -> 알고보니 두 번 돌고 있었음...
2. ScaleImage -> CogIPOneImage 변경 후 시간 감소 
3. 검사 시간 화면에 출력 


* To Do List 
1. 
==============================================================






==============================================================

Ver 0.1.25 ▶▶▶ 2023.08.29 (작업자 : 노주현, 이윤규)
* 작업 내용
1. Color Gain 적용
2. 렌즈 교체
3. 렌즈 조리개 닫아서 4에 맞추고 초점 맞춤, Color Gain 2 


* To Do List 
1. 
==============================================================




==============================================================

Ver 0.1.24 ▶▶▶ 2023.08.28 (작업자 : 노주현, 이윤규)
* 작업 내용
1. 페이지 횟수 5 -> 4 변경 (R, G, B, Bar) 
   Grab 시간 : 160 -> 130 ms 축소 


* To Do List 
1. 
==============================================================






==============================================================

Ver 0.1.23 ▶▶▶ 2023.08.28 (작업자 : 노주현, 이윤규)
* 작업 내용
1. 컬러 이미지 크기 1/4 축소 


* To Do List 
1. 
==============================================================




==============================================================

Ver 0.1.21 ▶▶▶ 2023.08.22 (작업자 : 노주현, 이윤규)
* 작업 내용
1. Page 컨트롤러 리셋 IO 로 변경 
2. RGB Bar White 순으로 PAGE 변경


* To Do List 
1. 딥러닝은 이벤트셋 되는 함수에서 실행, 룰베이스 배열 인스턴스들은 카메라 매니저에서 실행
2. 이미지 디스플레이 검사 끝나면 실행 (Defect View 와 함께)
==============================================================







==============================================================

Ver 0.1.20 ▶▶▶ 2023.08.19 (작업자 : 이윤규)
* 작업 내용
1. CameraStatus 
Live 구분 제거 
2. Page 조명 리셋 시리얼통신 함수 추가 -> 그랩 완료 후 실행  
3. CameraStatus 에 Inspection, Live 나누지 않고 그랩한 CListImage 만 수집 
   CameraSatus 에서 Thread 로 이미지 디스플레이 함수가 실행 됨 
4. CImageControl Class 내부 보완 -> CCameraMangager 에 Grab 관련 action 은 화면 종류 만큼 분할 되어 있어야 함 
5. Color Cam Setting Form 삭제 


* To Do List 
1. 
==============================================================


****** 조명 구성 *****

[컨트롤러 채널 구성]
1 : 바 Red
2 : 바 Green
3 : 바 Blue
4 : 돔 Red
5 : 돔 Green 
6 : 돔 Blue
7 : 돔 IR

전면 이미지 조명 촬영 순서
1 : R
2 : G
3 : B
4 : White + 백라이트  
5 : 바 (DT 검사)

후면 이미지조명 촬영 순서
1 : R
2 : G
3 : B
4 : White + 백라이트  
5 : IR

Main or Live 화면 구성
White, Color, DT or IR



==============================================================

Ver 0.1.19 ▶▶▶ 2023.08.19 (작업자 : 이윤규)
* 작업 내용
1. 카메라 그랩 후 Event Set 하고 이미지 후처리 
2. 주말 에이징
   - 주기 1000ms 12시간 이상 없음

3. Sleep 을 쓰지 않기 위해 Wait 함수 추가 
  
4. Live Time 이 늘어나는 현상
   Sleep 을 쓰는 경우 증가 -> Wait 함수 추가 ->멈추는 현상은 없어짐 
   Display 가 직접 되는 순간 시간 증가 -> Display Thread 실행 , Live Cross Thread 발생 소지, Form 이름 맞춰서 해결  
   Timer 가 아닌 for(;;) 로 실행, 딜레이 wait 

* To Do List 
1. CameraStatus 에 Inspection, Live 나누지 않고 그랩한 CListImage 만 수집 
   Grab 완료 이벤트 Set 되면 CListImage 만들고 MainForm or SettingForm 에 Display 시킨다. 
==============================================================






==============================================================

Ver 0.1.18 ▶▶▶ 2023.08.18 (작업자 : 이윤규)
* 작업 내용
1. 검사 병렬처리 위해 CWork 배열로 선언 
2. CImage List 배열로 선언 
3. GrabHalt() 안에 Allocate 함수 프로그램 실행 시 1회만 할당 
4. Euresys 함수 start 부터 콜백까지 로그 확인할 경우 4회 촬영 95ms 
   GrabHalt 와 이미지 디스플레이할 때 시간 소요 

* To Do List 
1. 이미지 촬상 시간은 빠르나, 이미치 출력하는데 시간이 소요 됨 
   -> NohgDisplay 변경하여 속도 측정 필요  
2. Display 창 변경 시 인덱스 맞추는게 어렵다 DEF 처리 필요 
==============================================================






==============================================================

Ver 0.1.17 ▶▶▶ 2023.08.17 (작업자 : 이윤규)
* 작업 내용
1. 구조 단순화 
2. CCameraManager 검사 함수 Thread 실행
3. Euresys 그랩 함수 구현 완료
4. 로그 큐 방식으로 저장
5. GrabStart() Thread 로 동시 실행 (순차 시 명령어 실행 단계에서 실행 시간 누적)
6. Saige Version2 구현
7. Admin 폼 추가, Admin 에 이미지 시뮬레이션 리스트박스 추가 

==============================================================






==============================================================

Ver 0.1.1 ▶▶▶ 2022.05.02 (작업자 : 이윤규)
* 작업 내용
1. Camera Class 구현 작업
 - CCamera Class 구현 완료
 - CMatrox Class 구현 완료
 - CDefine Class 구현 완료
 - CBasler Class 구현 완료
 - CGigE Class 구현 완료

* CCamera 클래스 - 추상 클래스로 구현
- 카메라 동작 특성상 공통된 기능으로 나열 가능 하고 다중 상속이 필요 없다고 판단 되어 추상 클래스로 구성 (기능 구현 강제 목적)
==============================================================


==============================================================

Ver 0.1.2 ▶▶▶ 2022.05.03 (작업자 : 이윤규)
* 작업 내용
1. CCameraManager Class 1차 구현 완료
 - 카메라의 동작과 관련된 전반적인 부분을 관장하는 클래스
 - .net에서 제공하는 표준 델리게이트(Action)를 이용하여 Camera Connect, Grab 상태등을 관리 할 수 있도록 구현
2. CThread Class 구현
 - 쓰레드 동작을 ManualEvent로 구성하여 작업자가 쓰레드를 제어 할 수 있도록 구현
 - 모든 쓰레드는 이 클래스를 이용하여 구동 해야 함.
 - 필요에 따라 ThreadRun 함수내에 Case구문 추가 
3. CImage Class 구현
 - 모든 이미지에 대한 메모리 할당, 저장 등의 기능 구현

==============================================================

==============================================================

Ver 0.1.3 ▶▶▶ 2022.05.04 (작업자 : 이윤규)
* 작업 내용
1. CMainSystem Class 1차 구현
 - 이 프로그램의 전체 플로우를 관장하는 클래스
 - 카메라 초기화, 검사 시작, 중지 함수 구현 완료
2. Drop Menu UI 구성 완료
 - 기존 Drop메뉴가 3개로 구현 되어있었으며, 클래스 내용의 중복이 있었음
 - 위 메뉴를 정리 하여 DropMenu를 하나로 구현 하여 동작 할 수 있도록 UI 프로그램 구현 완료

3. Display UI 화면 구성 완료
 - User Control을 이용하여 카메라 수량에 따라 Diplay 화면을 구성 할 수 있도록 구현 완료
 (현재는 임의로 카메라 두개로 가정 하여 프로그램 구현)

4. Camera Live 확인 완료
5. Camera Setting(Exposure Time, Contrast, Gain) 조정 하여 적용되는 것 확인 완료

==============================================================


==============================================================

Ver 0.1.4 ▶▶▶ 2022.05.06 (작업자 : 이윤규)
* 작업 내용
1. Layer 구성 완료
 - 대표님 피드백 후 폴더 넘버링(진행 순서에 따른 넘버링)
2. Matrox dll 최신 버전으로 교체(CXP 카메라 대응 하기 위함)
3. Matrox Board Type 선택 함수 구현 완료
4. Matrox Baord Number 선택 함수 구현 완료

==============================================================

==============================================================

Ver 0.1.5 ▶▶▶ 2022.05.09 (작업자 : 이윤규)
* 작업 내용
1. CInspect 추상 클래스 구현 완료
 - 검사의 공통된 기능(Initial, Uninitial, InspectionRun, InspectionComplete) 구현 하도록 강제
2. IDeepLearning 인터페이스 구현 완료
 - FindRoi, FindDefect 함수로 구성
(룰 베이스 검사, 얼라인 등 검사하는 동작이 다르기 때문에 각각의 인터페이스로 구성 할 계획)
3. CDeepLearning Class 구현
 - CInspect클래스, IDeepLearning 인터페이스를 상속 받아 구현한 클래스
 
==============================================================

==============================================================

Ver 0.1.6 ▶▶▶ 2022.05.10 (작업자 : 이윤규)
* 작업 내용
1. CDefect 클래스 1차 구현 완료
 - 검출된 Defect의 x, y 좌표, 크기등의 정보를 가지는 클래스

2. CDefectManager 클래스
 - Defect를 관리 하는 클래스
 - ObservableCollection 상속(사용 이유 : Private으로 가려져 있는 클래스내의 객체를 외부 객체에 정보를 제공 하기 위함)
 
==============================================================

==============================================================

Ver 0.1.7 ▶▶▶ 2022.05.11 (작업자 : 이윤규)
* 작업 내용
1. Create Directory 함수 구현 완료(System Directory)
 - 검출된 Defect의 x, y 좌표, 크기등의 정보를 가지는 클래스

2. Vidi Control, Stream, Workspace 변수 위치 변경
 - Focused 모드일 경우 VidiControl, Stream, WorkSpace는 단 하나만 존재 해야 하는점 파악
 - MainCore 클래스에서 초기화 할 수 있도록 수정
 - Recipe 측면으로 가져갈 필요 있기 때문에 추후 위치 변경 필요

3. 시뮬레이션을 통한 검사 확인(기존 학습된 마운트 Runtime 이용)
 
==============================================================

==============================================================

Ver 0.1.8 ▶▶▶ 2022.05.12 (작업자 : 이윤규)
* 작업 내용
1. CRecipe 클래스 구현 중
 
==============================================================

==============================================================

Ver 0.1.9 ▶▶▶ 2022.05.13 (작업자 : 이윤규)
* 작업 내용
1. ProductInfo 클래스 구현 완료
 - 제품과 관련된 정보를 초기화 하고 필요 Directory를 만들기 위한 클래스

2. Recipe UI 관련 작업 중
 - New Recipe, Load Recipe 구현 완료
 
==============================================================

==============================================================

Ver 0.1.10 ▶▶▶ 2023.01.11 (작업자 : 이윤규)
* 작업 내용
1. Serial 클래스 구현 완료
 - 기존의 미흡한 점 보완

2. Serial 클래스를 기반으로 한 트리거보드 클래스 구현 완료
 - Initialized, UnInitialized, Connect, DisConnect, TriggerBoardWriteData, GetConnectCheck, GetInstance 함수 구현 완료
 - 함수에 대한 설명은 주석으로 기록
 
==============================================================